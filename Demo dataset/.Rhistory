head(data)
dim(data)
### testing: could make a 'list' with data and res, and use rbindlist(list) to merge them much faster than cbind
#   test <- rbindlist(list(data, res))
#   dim(test)
#   not designed for adding columns, but for adding rows -- could use fill = TRUE to add the missing cols with NA's, then remove them, but seems messy
## Save cluster labels to CSV
setwd(OutputDirectory)
setwd("Output_FlowSOM/Output_FlowSOM_info")
getwd()
write.table(res.original, file = "original_cluster_labels_FlowSOM.txt", row.names = FALSE, quote = FALSE, sep = "\t")
write.table(res.meta, file = "meta_cluster_labels_FlowSOM.txt", row.names = FALSE, quote = FALSE, sep = "\t")
## Save FlowSOM_out as a .csv file
capture.output(FlowSOM_out, file = "FlowSOM_output.txt")
# These don't work because FlowSOM_out can't be coerced into a dataframe
# write.csv(as.list(FlowSOM_out), file = paste(paste0(data.name), "_FlowSOM_details.csv", sep = ""))
# lapply(as.list(FlowSOM_out), function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
# capture.output(summary(FlowSOM_out), file = "FlowSOM_output.txt")
# could try: write.list(FlowSOM_out, file = "test")
## Write to .csv
setwd(OutputDirectory)
setwd("Output_FlowSOM/Output_FlowSOM_data")
getwd()
### X.X - Write merged sample file
if(write.FSOM.merged == 1){
fwrite(data, file = paste(paste0(data.name), "_with_FlowSOM.csv", sep = ""), row.names=FALSE)
## Write to .fcs
#metadata <- data.frame(name=dimnames(data)[[2]],desc=paste('column',dimnames(data)[[2]],'from dataset'))
#metadata ## Double check metadata
## Create FCS file metadata - ranges, min, and max settings
#metadata$range <- apply(apply(data,2,range),2,diff)
#metadata$minRange <- apply(data,2,min)
#metadata$maxRange <- apply(data,2,max)
#data.ff <- new("flowFrame",exprs=as.matrix(data), parameters=AnnotatedDataFrame(metadata)) # in order to create a flow frame, data needs to be read as matrix by exprs
#head(data.ff)
#write.FCS(data.ff, paste0(data.name, "_with_FlowSOM", ".fcs")) ## Save flowframe as .fcs file -- save data (with new tSNE parameters) as FCS
#head(exprs(data.ff))
}
### 4.5. - Export each group as a separate .csv and .fcs file
if(write.FSOM.group == 1){
for(a in AllGroupNames){
data_subset <- subset(data, data[[grp.col]] == a)
dim(data_subset)
## write .csv
fwrite(data_subset, file = paste0(data.name, "_", a, "_with_FlowSOM", ".csv"), row.names=FALSE)
## write .fcs
#metadata <- data.frame(name=dimnames(data_subset)[[2]],desc=paste('column',dimnames(data_subset)[[2]],'from dataset'))
#metadata
## Create FCS file metadata - ranges, min, and max settings
#metadata$range <- apply(apply(data_subset,2,range),2,diff)
#metadata$minRange <- apply(data_subset,2,min)
#metadata$maxRange <- apply(data_subset,2,max)
#data_subset.ff <- new("flowFrame",exprs=as.matrix(data_subset), parameters=AnnotatedDataFrame(metadata)) # in order to create a flow frame, data needs to be read as matrix by exprs
#head(data_subset.ff)
#write.FCS(data_subset.ff, paste0(data.name, "_", a, "_with_FlowSOM", ".fcs"))
}
}
### 4.6. - Export each sample as a separate .csv and .fcs file
if(write.FSOM.sep == 1){
for (a in AllSampleNames) {
data_subset <- subset(data, data[[samp.col]] == a)
dim(data_subset)
## write .csv
fwrite(data_subset, file = paste0(data.name, "_", a, "_with_FlowSOM", ".csv"), row.names=FALSE)
## write .fcs
#metadata <- data.frame(name=dimnames(data_subset)[[2]],desc=paste('column',dimnames(data_subset)[[2]],'from dataset'))
#metadata
## Create FCS file metadata - ranges, min, and max settings
#metadata$range <- apply(apply(data_subset,2,range),2,diff)
#metadata$minRange <- apply(data_subset,2,min)
#metadata$maxRange <- apply(data_subset,2,max)
#data_subset.ff <- new("flowFrame",exprs=as.matrix(data_subset), parameters=AnnotatedDataFrame(metadata)) # in order to create a flow frame, data needs to be read as matrix by exprs
#head(data_subset.ff)
#write.FCS(data_subset.ff, paste0(data.name, "_", a, "_with_FlowSOM", ".fcs"))
}
}
setwd(PrimaryDirectory)
getwd()
}
###################################################### 5. tSNE ######################################################
if(Run_tSNE == 1){
### 5.1 - Create output directories
setwd(OutputDirectory)
dir.create("Output_tSNE", showWarnings = FALSE)
setwd("Output_tSNE")
dir.create("Output_tSNE_info", showWarnings = FALSE)
dir.create("Output_tSNE_data", showWarnings = FALSE)
setwd(OutputDirectory)
### 5.2 - Subsample full dataset (including FlowSOM cluster no, if FlowSOM was run)
## take res dataframe 'output_data'
## subsample to target no 'output_data_subsample'
## reduce to data_specific 'output_data_subsample_specific'
## output_data
head(data)
dim(data)
## Subsampling
if(tSNE_dwnsmpl == "uniform"){
dim(data)
set.seed(tSNE_nsub_seed)
data_subsampled <- data[sample(1:nrow(data), tSNE_nsub), ]
dim(data_subsampled)
data_subsampled <- as.data.frame(data_subsampled)
}
if(tSNE_dwnsmpl == "specific"){
data_subsampled <- data.frame()
for (i in c(1:length(AllSampleNames))) {
nam <- AllSampleNames[i]
nsub <- tSNE.dwnsmp.targets[i]
data.temp <- subset(data, data[[samp.col]] == nam) # works
nrow(data.temp)
set.seed(tSNE_nsub_seed)
data.temp <- data.temp[sample(1:nrow(data.temp), nsub), ]
nrow(data.temp)
data_subsampled <- rbind(data_subsampled, data.temp)
}
dim(data_subsampled)
}
### 2.3 - Create set of column (parameter) names
head(data_subsampled)                            # show data with headings
ColumnNames_for_tSNE <- unname(colnames(data_subsampled))[ClusteringColNos] # e.g. [c(11, 23, 10)] to include the markers corresponding to the column numbers 11, 23, 10
ColumnNames_for_tSNE  # check that the column names that appear are the ones you want to analyse
dim(data_subsampled) # Review dimensionality of 'data' -- N events and N parameters
data_specific <- data_subsampled[, ColumnNames_for_tSNE] # Prepare data for Rtsne --  select columns to use
dim(data_specific) # Review dimensionality of 'data' -- N events and N parameters
### 5.3 - Save a copy of 'data' and 'data specific'
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_info")
## Export a list of parameters used to run tSNE and Phenograph
tSNEparametersname <- paste0(data.name, "_data_and_columns_used_for_tSNE")
tSNEparameters <- paste(tSNEparametersname, ".csv", sep = "")
write.csv(x = data_specific, file = tSNEparameters)
## Export subsampled data in CSV format (record of what was run)
if(write.pre.tSNE == 1){
subsampled_data_name <- paste0(data.name, "_subsampled_data")
subsampled_data <- paste(subsampled_data_name, ".csv", sep = "")
write.csv(x = data_subsampled, file = subsampled_data)
}
### 5.4 - Run tSNE ('data' at this point is scaled, transformed) -- RUN ALL OF STEP 5
## Set working directory to "Output_info"
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_info")
## Turn sink on (send the verbose text from the tSNE algorithm progress updates to a .txt file)
verbose_name <- paste0("tSNE_verbose_", data.name, ".txt")
sink(file = verbose_name, append=TRUE, split=FALSE, type = c("output", "message"))
## Run tSNE algorithm
set.seed(tSNE_seed)                             # default = 42 -- sets seed for reproducibility, delete or comment out for random tSNE
tsne_out <- Rtsne(as.matrix(data_specific),     # dataset (assigned above) read as a matrix
dims = 2,                     # default = 2 -- only input 2 or 3 (2 = plot in 2D, 3 = plot in 3D)
initial_dims = 50,            # default = 50 -- number of dimensions retained in initial PCA step
perplexity = 30,              # default = 30
theta = 0.5,                  # default = 0.5 -- use 0.5 for Barnes-Hut tSNE, 0.0 for exact tSNE (takes longer)
check_duplicates = FALSE,      # default = TRUE, can set to FALSE if problematic
pca = TRUE,                   # default = TRUE -- performs a PCA prior to actual tSNE run
max_iter = 1000,              # default = 1000 -- default total iterations
verbose = TRUE,               # default = FALSE -- best to set as TRUE to receive feedback
is_distance = FALSE,          # default = FALSE -- experimental, using X as a distance matrix
Y_init = NULL,                # default = NULL -- recommend to use NULL for random initialisation
stop_lying_iter = 250,        # default = 250 -- number of iterations of early exaggeration
mom_switch_iter = 250,        # default = 250 -- number of iterations before increased momentum of spread
momentum = 0.5,               # default = 0.5 -- initial momentum of spread
final_momentum = 0.8,         # default = 0.8 -- momentum of spread at 'final_momentum'
eta = 200,                    # default = 200 -- learning rate
exaggeration_factor = 12.0    # default = 12.0 -- factor used during early exaggeration
)
## turn sink off
sink()
## if tSNE detected duplicates, the following errors should occur:
# "Error in Rtsne.default(as.matrix(data_specific), dims = 2, initial_dims = 50,  : Remove duplicates before running TSNE."
# "Error in inherits(.data, "split") : object 'tsne_out' not found"
### 5.5 - Save info from tSNE run and add tSNE parameters to dataset
## Save tsne_out output info as .csv (i.e., output settings as raw results)
tsne_out.df <- ldply(tsne_out, data.frame)
output_name <- paste0("tSNE_parameter_values_", data.name, ".csv")
write.csv(x = tsne_out.df, file = output_name) # pretty blood good -- doesn't give row number for Y, costs, or itercosts -- but easy to figure out
## Add Y (tSNE coordinate) values to starting data
tsne_out_Y <- tsne_out$Y
head(tsne_out_Y)
colnames(tsne_out_Y) <- c(tSNE_X_name, tSNE_Y_name)
head(tsne_out_Y)
## save cluster labels
data_subsampled <- cbind(data_subsampled, tsne_out_Y)
head(data_subsampled)
### 3.5 - Write all data (with tSNE and FlowSOM parameters) to .csv and .fcs
## Set working directory
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data")
if(write.tSNE.merged == 1){
## Save data (with new tSNE parameters) as CSV
write.csv(x = data_subsampled, file = paste0(data.name, "_with_tSNE", ".csv"), row.names=FALSE)
## Check data and data column names
head(data_subsampled)
dimnames(data_subsampled)[[2]]
## Create FCS file metadata - column names with descriptions
metadata <- data.frame(name=dimnames(data_subsampled)[[2]],
desc=paste('column',dimnames(data_subsampled)[[2]],'from dataset')
)
## Create FCS file metadata - ranges, min, and max settings
#metadata$range <- apply(apply(data_subsampled,2,range),2,diff)
metadata$minRange <- apply(data_subsampled,2,min)
metadata$maxRange <- apply(data_subsampled,2,max)
## Create flowframe with tSNE data
data_subsampled.ff <- new("flowFrame",
exprs=as.matrix(data_subsampled), # in order to create a flow frame, data needs to be read as matrix
parameters=AnnotatedDataFrame(metadata)
)
## Check flow frame
data_subsampled.ff
## Save flowframe as .fcs file -- save data (with new tSNE parameters) as FCS
new_file_name_fcs <- paste0(data.name, "_with_tSNE", ".fcs")
write.FCS(data_subsampled.ff, new_file_name_fcs)
### There is a delay here -- fcs file ends up in primary directory
}
### 3.7 - Write GROUPED data (with tSNE and FlowSOM parameters) to .csv and .fcs
if(write.tSNE.group == 1){
for(a in AllGroupNames){
data_subset <- subset(data_subsampled, data_subsampled[[grp.col]] == a)
dim(data_subsampled)
## write .csv
write.csv(data_subset, file = paste0(data.name, "_", a, "_with_tSNE.csv", sep = ""), row.names=FALSE)
## write .fcs
metadata <- data.frame(name=dimnames(data_subset)[[2]],desc=paste('column',dimnames(data_subset)[[2]],'from dataset'))
metadata
## Create FCS file metadata - ranges, min, and max settings
#metadata$range <- apply(apply(data_subset,2,range),2,diff)
metadata$minRange <- apply(data_subset,2,min)
metadata$maxRange <- apply(data_subset,2,max)
data_subset.ff <- new("flowFrame",exprs=as.matrix(data_subset), parameters=AnnotatedDataFrame(metadata)) # in order to create a flow frame, data needs to be read as matrix by exprs
head(data_subset.ff)
write.FCS(data_subset.ff, paste0(data.name, "_", a, "_with_tSNE", ".fcs"))
}
}
### 3.8 - Write individual files (with tSNE and FlowSOM parameters) to .csv and .fcs
if(write.tSNE.sep == 1){
for (a in AllSampleNames) {
data_subset <- subset(data_subsampled, data_subsampled[[samp.col]] == a)
## write .csv
write.csv(data_subset, file = paste0(data.name, "_", a, "_with_tSNE.csv", sep = ""), row.names=FALSE)
## write .fcs
metadata <- data.frame(name=dimnames(data_subset)[[2]],desc=paste('column',dimnames(data_subset)[[2]],'from dataset'))
## Create FCS file metadata - ranges, min, and max settings
#metadata$range <- apply(apply(data_subset,2,range),2,diff)
metadata$minRange <- apply(data_subset,2,min)
metadata$maxRange <- apply(data_subset,2,max)
data_subset.ff <- new("flowFrame",exprs=as.matrix(data_subset), parameters=AnnotatedDataFrame(metadata)) # in order to create a flow frame, data needs to be read as matrix by exprs
head(data_subset.ff)
write.FCS(data_subset.ff, paste0(data.name, "_", a, "_with_tSNE", ".fcs"))
}
## Move back to PrimaryDirectory
setwd(PrimaryDirectory)
getwd()
}
# note -- in the final data output, all parameters are included, but only the subsampled and/or transformed cells
}
###################################################### 6. tSNEplots ######################################################
if(Run_tSNEplots == 1){
## Create 'jet' colour scheme (not available by default in R)
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
## Set your working directory here (e.g. "/Users/Tom/Desktop/")
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data")
## Assign the working directory as 'PrimaryDirectory'
PlotDirectory <- getwd()
PlotDirectory
## Create a list of file names (names of the samples) and check file names
PlotFiles <- list.files(path=PlotDirectory, pattern = ".csv") # ALTERNATIVE: list.files(pattern = '\\.csv')
PlotFiles
## In the output of the previous line, you will see the names for the tSNE parameters -- insert them in between the "" below
plotXname <- tSNE_X_name
plotYname <- tSNE_Y_name
##### STEP 2b: ESTABLISH GLOBAL SCALE LIMITS FOR COLOUR and XY #####
## Create a 'list' of the data from all CSV files, then combine data into one large dataframe
tables <- lapply(PlotFiles, read.csv, header = TRUE)
combined.df <- do.call(rbind , tables)
numeric.only <- sapply(combined.df, is.numeric)
combined.df <- combined.df[ , numeric.only] # removes any non 'numeric' values
## Find column names for whole dataset
names(combined.df)
## find maximum and minimum tSNE-X value --> define these
Xmax <- max(combined.df[[plotXname]]) # double check function
Ymax <- max(combined.df[[plotYname]])
## find maximum and minimum tSNE-Y value --> define these
Xmin <- min(combined.df[[plotXname]]) # double check function
Ymin <- min(combined.df[[plotYname]])
# Using STEP 2b, the colour scale max and min will be the same for all samples, despite what the individual sample max or min is
# Also using STEP2b, the X and Y limits will be the same for all samples, despite what the individual sample max or min is
##### STEP 3: Loop with  samples in separate folders #####
## First, change the tSNE parameters (on lines 103 and 104)
## Then run all of the script below
## Set wd
setwd(PlotDirectory)
getwd()
## Create output folder (if a folder called "Output" already exists, nothing will happen)
dir.create("Output(tSNEplots)", showWarnings = FALSE)
for (File in PlotFiles){
## CSV is read into dataframe 'CurrentSampleCSV'
CurrentSampleCSV <- read.csv(File)
CurrentSampleCSV
numeric.only <- sapply(CurrentSampleCSV, is.numeric)
CurrentSampleCSV <- CurrentSampleCSV[ , numeric.only] # removes any non 'numeric' values
# Modifications to the name are made here
File <- gsub(" ", "_", File) # replaces empty spaces in the file name with '_'
File <- gsub(".csv", "", File) # removes ".csv" from the file name
## Defines the 'tSNE' parameters that will be used to set the X and y axis
plotX <- CurrentSampleCSV[[plotXname]] # defines the tSNE1 (x-axis) parameter name from your file
plotY <- CurrentSampleCSV[[plotYname]] # defines the tSNE2 (y-axis) parameter name from your file
## Create subdirectory
setwd("Output(tSNEplots)")
newdir <- paste0(File)
dir.create(newdir, showWarnings = FALSE)
setwd(newdir)
getwd()
## Sub-loop to create one image for every parameter
for (i in names(CurrentSampleCSV)){
tSNEplotLoop <- ggplot(
data = `CurrentSampleCSV`,
aes(x = plotX, y = plotY)) +
geom_point(size = 0.5, mapping=aes_string(color=i))+ # 2 for large # 0.5 for small
scale_colour_gradientn(colours = jet.colors(50),
limits = c(quantile(combined.df[[i]], probs = c(0.01)), #0.03-01 seems to work well
quantile(combined.df[[i]], probs = c(0.995))), #0.97-995 seems to work well
oob=squish) +
ggtitle(i) +
xlim(Xmin, Xmax)+
ylim(Ymin, Ymax)+
# xlab("tSNE1") + # use if desired, must also change theme settings below
# ylab("tSNE2") + # use if desired, must also change theme settings below
theme( # panel.background = element_rect(fill = "white", colour = "white", size = 0.5), # change 'colour' to black for informative axis
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
legend.position = "right",
legend.text=element_text(size=15), # large = 30 # small = 8
legend.key.height=unit(1,"cm"), # large = 3 # small = 1.2
legend.key.width=unit(0.4,"cm"), # large = 1 # small = 0.4
legend.title=element_blank(),
plot.title = element_text(color="Black", face="bold", size=15, hjust=0) # size 70 for large, # 18 for small
)
ggsave(tSNEplotLoop, filename = paste0(File, "-", i,".jpeg"), width = 4, height = 3) # Large size default width = 14.4 height = 12 (11.35 without title), default = PDF, # small w3.6, h3
}
## Move back to PrimaryDirectory
setwd(PlotDirectory)
getwd()
}
}
###################################################### 7. ClusterPlots ######################################################
if(Run_ClusterPlots == 1){
### Setup
## WD and colours
jet.black <- colorRampPalette(c("black", "#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000", "purple"))
colour.scheme <- jet.black
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data")
dir.create("Output_NumPlots", showWarnings = FALSE)
FileNames <- list.files(path=getwd(), pattern = ".csv")
FileNames
## In the output of the previous line, you will see the names for the tSNE parameters -- insert them in between the "" below
plotXname <- tSNE_X_name
plotYname <- tSNE_Y_name
cluster.name <- FlowSOM_meta_name
cluspl.n.sub # already defined
cluspl.n.sub.seed # already defined
### Read files
## Read all CSV files into a list
files  <- list.files(pattern = '\\.csv')
## Create a 'list' of the data from all CSV files, then combine data into one large dataframe
tables <- lapply(files, read.csv, header = TRUE)
combined.df <- do.call(rbind , tables)
numeric.only <- sapply(combined.df, is.numeric)
combined.df <- combined.df[ , numeric.only] # removes any non 'numeric' values
## find maximum and minimum tSNE-X value --> define these
Xmax <- max(combined.df[[plotXname]]) # double check function
Ymax <- max(combined.df[[plotYname]])
## find maximum and minimum tSNE-Y value --> define these
Xmin <- min(combined.df[[plotXname]]) # double check function
Ymin <- min(combined.df[[plotYname]])
### Loop for Number Plot
for (File in FileNames){
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data")
## CSV is read into dataframe 'CurrentSampleCSV'
CurrentSampleCSV <- read.csv(File)
numeric.only <- sapply(CurrentSampleCSV, is.numeric)
CurrentSampleCSV <- CurrentSampleCSV[ , numeric.only] # removes any non 'numeric' values
## Subsample to pre-defined number manageable number of points (only if samples has more cells than the target downsample number)
if(nrow(CurrentSampleCSV) > cluspl.n.sub){
set.seed(cluspl.n.sub.seed)
CurrentSampleCSV <- CurrentSampleCSV[sample(1:nrow(CurrentSampleCSV), cluspl.n.sub), ]
}
# Modifications to the name are made here
File <- gsub(" ", "_", File) # replaces empty spaces in the file name with '_'
File <- gsub(".csv", "", File) # removes ".csv" from the file name
## Defines the 'tSNE' parameters that will be used to set the X and y axis
plotX <- CurrentSampleCSV[[plotXname]] # defines the tSNE1 (x-axis) parameter name from your file
plotY <- CurrentSampleCSV[[plotYname]] # defines the tSNE2 (y-axis) parameter name from your file
clust.no <- CurrentSampleCSV[[cluster.name]]
## Subdirectory
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data/Output_NumPlots")
tSNEplotLoop <- ggplot(
data = `CurrentSampleCSV`,
aes(x = plotX, y = plotY)) +
scale_colour_gradientn(colours = colour.scheme(length(unique(clust.no)))) +
geom_text(aes(label=clust.no, colour=clust.no)) +
#aes(x = plotX, y = plotY)) +
#geom_point(size = 0.5)+ # 2 for large # 0.5 for small
#scale_colour_manual(name = cluster.name, values = c(colour.scheme(length(unique(clust.no))))) +
xlim(Xmin, Xmax)+
ylim(Ymin, Ymax)+
ggtitle(cluster.name) +
# xlab("tSNE1") + # use if desired, must also change theme settings below
# ylab("tSNE2") + # use if desired, must also change theme settings below
theme( # panel.background = element_rect(fill = "white", colour = "white", size = 0.5), # change 'colour' to black for informative axis
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
legend.position = "right",
legend.text=element_text(size=15), # large = 30 # small = 8
legend.key.height=unit(1,"cm"), # large = 3 # small = 1.2
legend.key.width=unit(0.4,"cm"), # large = 1 # small = 0.4
legend.title=element_blank(),
plot.title = element_text(color="Black", face="bold", size=15, hjust=0) # size 70 for large, # 18 for small
)
ggsave(tSNEplotLoop, filename = paste0(File, ".jpeg"), width = 6, height = 4.5) # Large size default width = 14.4 height = 12 (11.35 without title), default = PDF, # small w3.6, h3
## Move back to PrimaryDirectory
setwd(PrimaryDirectory)
getwd()
}
### CLUSTER COLOUR PLOT
## Set wd
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data")
dir.create("Output_ClusterPlots", showWarnings = FALSE)
for (File in FileNames){
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data")
## CSV is read into dataframe 'CurrentSampleCSV'
CurrentSampleCSV <- read.csv(File)
numeric.only <- sapply(CurrentSampleCSV, is.numeric)
CurrentSampleCSV <- CurrentSampleCSV[ , numeric.only] # removes any non 'numeric' values
# Modifications to the name are made here
File <- gsub(" ", "_", File) # replaces empty spaces in the file name with '_'
File <- gsub(".csv", "", File) # removes ".csv" from the file name
## Defines the 'tSNE' parameters that will be used to set the X and y axis
plotX <- CurrentSampleCSV[[plotXname]] # defines the tSNE1 (x-axis) parameter name from your file
plotY <- CurrentSampleCSV[[plotYname]] # defines the tSNE2 (y-axis) parameter name from your file
clust.no <- CurrentSampleCSV[[cluster.name]]
## Create subdirectory
setwd(OutputDirectory)
setwd("Output_tSNE/Output_tSNE_data/Output_ClusterPlots")
tSNEplotLoop <- ggplot(
data = `CurrentSampleCSV`,
aes(x = plotX, y = plotY, colour = as.factor(clust.no))) +
geom_point(size = 1)+ # 2 for large # 0.5 for small
#scale_colour_gradientn(colours = colour.scheme(50)) +
scale_colour_manual(name = cluster.name, values = c(colour.scheme(length(unique(clust.no))))) +
ggtitle(cluster.name) +
xlim(Xmin, Xmax)+
ylim(Ymin, Ymax)+
ggtitle(cluster.name) +
# xlab("tSNE1") + # use if desired, must also change theme settings below
# ylab("tSNE2") + # use if desired, must also change theme settings below
theme( # panel.background = element_rect(fill = "white", colour = "white", size = 0.5), # change 'colour' to black for informative axis
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
legend.position = "right",
#legend.text=element_text(size=10), # large = 30 # small = 8
#legend.key.height=unit(1,"cm"), # large = 3 # small = 1.2
#legend.key.width=unit(0.4,"cm"), # large = 1 # small = 0.4
#legend.title=element_blank(),
plot.title = element_text(color="Black", face="bold", size=15, hjust=0) # size 70 for large, # 18 for small
)
ggsave(tSNEplotLoop, filename = paste0(File, ".jpeg"), width = 10.5, height = 6.75) # Large size default width = 14.4 height = 12 (11.35 without title), default = PDF, # small w3.6, h3
## Move back to PrimaryDirectory
setwd(PrimaryDirectory)
getwd()
}
## Move back to PrimaryDirectory
setwd(PrimaryDirectory)
getwd()
}
citation("FlowSOM")
## From Github repositories
#if(!require('Rphenograph')){devtools::install_github("JinmiaoChenLab/Rphenograph")} # not required
citation("plyr")
## From Github repositories
#if(!require('Rphenograph')){devtools::install_github("JinmiaoChenLab/Rphenograph")} # not required
citation("Rtsne")
